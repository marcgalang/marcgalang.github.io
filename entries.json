{"entries":[
{"date":"04.13.2015", "title":"Hi, my name is...", "text":"&#91disclaimer: There are numerous blogs on the internet written by people for whom writing is a passion or even a profession. I wouldn't count myself in either category and given the parameters and time constraints of this daily blog, you might arrive at the same conclusion. That being said, here are my ramblings.&#93<br><br>The day had its share of introductions. Not just of the instructor and my cohorts but introductions to a number of tools such as Notebook++ and Everything (which I'll throw onto my pc as soon as I get home). We each got to boot a machine and play around with these tools. We also set up accounts with various services including but not limited to gmail, google voice, dropbox, stack overflow, Github, and twitter. Much of the morning, while still exploratory, was largely clerical as the accounts were squared away. The fun began when we played with the code for a twitter bot. There were really only a few lines of code, but it was enough to tweet phrases out of a text file. It's one thing to write code that outputs &quot;Hello, world,&quot; to a screen but it's more fun to actually work on something that sends out messages to the entire world (of twitter, at least). We then jumped into git, where our code will live. "},
{"date":"04.14.2015", "title":"D10, I choose you!", "text":"&#91disclaimer: see above disclaimer&#93<br><br>Although we played with code yesterday, today is the first day we were officially learning what we are doing from the ground up: what is a variable, what is a boolean, etc. We looked at lists and how to manipulate them. There is enough information that may be considered basic to make me feel comfortable but there's still enough that I have to google to find the correct command or the correct syntax. The interesting part of the day is when we played a simple dice game with physical dice, making up and modifying the rules of the game as we went. Based on what we learned the first day (and with the help of prior knowledge, google, and stack overflow) we were to code a version of the game. Even with varying prior coding experience I think that each pair of students is up to the challenge. We're able to help each other as we go, reinforcing things we may have just learned.<br><br>Regular breaks away from the workstations are strongly encouraged, which is difficult with me-- although I appreciate a break when stuck I'd like to keep going when I think I have a flow."},
{"date":"04.15.2015", "title":"Hump day.", "text":"&#91disclaimer: see above disclaimer&#93<br><br>Most of us didn't finish the lab from yesterday, so we started the day on that. The lab involved exploring string/list manipulation. I personally spent a lot of time trying to figure out the best way to test if an object exists in two different lists. Logically, it is the intersection of the two sets, but it seems like not only is there not a pre-made function (method? operation?), but according to the internets the best way to do this is with sets, a subject I would be happy to delve into when the need becomes, well, overwhelming... It's not that I don't want to learn something new (that is why I'm here, after all), but I think it best to take in my knowledge in categorized chunks, and something like sets does not fit into any of the chunks I'm currently nibbling on.<br><br>The second half of the day was spent on coding as a group. There were certainly pluses and minuses to this, as I'm sure was part of the point. The exercise gave us the opportunity to work together and share ideas. It allowed people to ask questions and see multiple solutions to a problem. It also showed that multiple solutions can each be valid, but they are not necessarily valid together. But we also got to an end of sorts, which I'd consider a success."},
{"date":"04.16.2015", "title":"Without the Fun they would just be nctions.", "text":"&#91disclaimer: see above disclaimer&#93<br><br>We presented our first code today. It's was nice to see how other teams approached the same problems and sometimes found similar solutions and sometimes did it a different way. It was also nice to see some issues still remained in everyone's code-- nobody is &#91yet&#93 perfect.<br><br>The reason you can read this blog is because today we set it up. We dealt with json files (although we didn't really delve into much detail) and a tiny bit of html.<br><br>Our lecture material was on functions (yay!) and loops (also yay!) but with loops come the need for breaks and trying to figure out why breaks break functions but don't break the way I wanted them to break. However, finally getting it to work was a good win for the day."},
{"date":"04.17.2015", "title":"Steam Blown", "text":"&#91disclaimer: see above disclaimer&#93<br><br>New lab today, based on the loops and functions we went over yesterday. Got through quickly, so then I went back to the twit bot and the dice game, concurrently. For the twit bot, I wanted to randomly switch the locations that it was checking for trending topics and from each list I wanted a random topic. This makes things more interesting and dynamic than just choosing the top trending topic in Chicago, which could be the same for hours. It was also breaking when a tweet was over the character limit, so I needed to find how to prevent a long tweet from being sent. For the dice program, much of the code is spent doing something in regards to player 1, then doing the exact same thing for player 2. So I tried to condense the code by adding for-each loops where I could. While this was largely successful, it also brought about a problem with pointers, which is another topic that is beyond my current comfort zone. Or at least it was when I first met them a year and a half ago. So far, today, it's not too bad. The afternoon brought a necessary part of software development: blowing off steam. For us that meant booting up Steam. I haven't played a first person shooter since Quake III. That's older than some of my daughters. So I was little help to my fellow classmates in our attempt to frag our instructors. I also got more done with my dice game and will be polishing it up this weekend. Not because it's required for class. It's just fun.<br><br>"},
{"date":"04.20.2015", "title":"Blank page on a Monday morning?!?", "text":"Where did all my steam go? I think I must have wasted it over the weekend. In whatever time I had to code I was throwing in little bits of text formatting into my dice game, tweaks to my twit bot, or learning about the ComicVine API so in a future little program I was send the cover of a comic book to a notifier app like Boxcar. Today though, I was double stumped. First by the dreaded blank page. Coming up with a worthy project has long been an issue with me. I can more easily meet an objective if I'm given an objective but sometimes I can't get out of the starting gate if the first step is my own idea. And then I spent all morning double guessing and changing that idea. But at least it's moving now. The other half of my stumpedness was getting my head around MongoDB, which looks sooooo much easier than I found it to be. I often look at a few examples of code and see where they overlap as the necessary parts. The 'simple' examples I found were all using different methods so I couldn't see the commonalities, thus my confusion. But again, i have a bit of understanding now. Maybe a good nights sleep will help..."},
{"date":"04.21.2015", "title":"Hi, Otto!", "text":"So I finally settled on a personal project and made decent headway on the interface portion using WConio (after spending an hour with Curses, which is for Unix, not Windows). After being down a bit yesterday I'm okay again. The latest lab assignments presented some interesting challenges. I handled the logic just fine, the commands came to me, and the syntax was eventually fixed, only because things wouldn't run otherwise. I am bit surprised that as I learn more advanced things the simple things can still trip me up. As I switch between more languages in the future, I can see this being an annoying (even if not insurmountable) problem."},
{"date":"04.22.2015", "title":"I eat deadlines for breakfast.", "text":"Further progress made with my personal project. I added functions to print ascii and unicode character numbers as I mapped out my GUI. The next steps of game logic, scoring/status/results appear pretty straight forward now, with time being the most significant limiter. I'm hoping to have the computer play against the user and doing that is the biggest programmatic challenge. And if I finish that I'll add more game elements.<br><br>For the group project I had to decipher how the twitter data was being returned and figure out how to the get to just the pieces I need. Now I just need to take that data and make a list.<br><br>I suspect both deadlines will be met."},
{"date":"04.23.2015", "title":"p=p%2+1", "text":"So how do you use the same mathematical function to turn a 1 into a 2 and a 2 into a 1? I thought there must be a relatively simple way to do it and was thinking about it as I was driving last night. Why was I thinking about such a trivial thing? I'm coming to learn that so much of programming is learning how to do things efficiently. Not only by reducing the number of lines required but also how many characters. At the same time there's a need for readability that can be harder as code becomes more compact. That's the push and pull I'm going through with my 300 odd lines of code in my personal project. Spreading it out makes it a bit easier in some ways(but requires much more scrolling) but when things are more elegant they also impart a decent readability, too. <br><br>Similar to this, Spence, our lead developer on our team project, showed me how using about the same number of characters in about the same number of lines made our program run more than 100 times faster. Genius."},
{"date":"04.24.2015", "title":"2 down, 10 to go.", "text":"I was quite impressed with what each of us has done in the past two weeks. Although some of us come with some coding experience, some of us come with our personal hang-ups and some of us even come with both, we each presented something that was a substantial amount more than where we started. My main take away is that I need to consider using more object oriented programming (OOP?) and setting up my code accordingly. A number of my cohorts took it upon themselves to learn how to do that and I admire them for that. The assignment parameters are not bounds, but benchmarks. That being said, there is something to be said about finding the simplest way to get something done, even if it's not as scalable as another method. Unless scalability is a priority, of course.<br><br>We are supposed to come up with things we want to do to expand or improve our personal projects, but we're not to do it yet. My plan is to add a bunch of features to my game using the methods that I've started with, but I'm doing that this weekend. To fulfil my assignment, I'll rewrite everything with OOP."},
{"date":"04.27.2015", "title":"The marketing department is behind me on this...", "text":"Finished up the personal projects today. I had it basically working on Friday but today I added a random token feature, cleaned up a lot of little things, added an intro screen with animation, made everything a little prettier. Overall I'm happy with it at this point, but still know where improvements can be made (speaking of which, I haven't yet made the code object oriented as was speculated last Friday). We had the opportunity to pitch a feature to be added, as would be the case in the real world. Any such simulations are welcome and we should do something like that on a regular basis. Again, having a class of six makes this very doable.<br><br>We had a coding challenge to write a high-low game as quickly as possible. 20 minutes or so to do 30 dirty lines of code was fun but a reminder that coders like Felicity Smoak only exist in comic books (and tv)."},
{"date":"04.28.2015", "title":"While python==True", "text":"I've realized that I do a lot of pondering before I take action and the bigger the action required the longer the pondering. Today it took a while to decide on a twitter bot worth spending my time on and decided on idea number 3: taking a random twitter user and comparing the friends of all of that user's friends to see who is not yet on a friend of that user, but should be. Then it will tweet that user with the name of the top 5 people they should follow. It should make sense to them because there should be some commonalities to the names on the list. The twist is that the third name on the list is of my choosing.<br><br>I also think I did ok with the mock interview and look forward to the next one.<br><br>On the technical side of things, it still takes a while to parse out what's what in a json, but I found that a little plug-in for my text editor makes it all make a bit more sense."},
{"date":"04.29.2015", "title":"pre-Java", "text":"The morning started with a blog entry to wrap up our section on python, setting up a new wordpress account, and looking for a github repository that we found interesting and possibly to contribute to. The blog entry got lost in the move-- a casualty of the lessons of saving everything but not necessarily on a particular workstation if it is not dedicated to you. Nevertheless, we were given a crash course in html as a precursor to javascript. Although I never really manipulated html before it was mostly straightforward and my ability to form tags, styles, classes and stylesheets is of to a solid start. I've completed 2 of the 3 labs. I discovered the key to lab 2 was that an element can have multiple classes."},
{"date":"04.30.2015", "title":"JavaScript", "text":"We jumped into JavaScipt today. So far the syntax is not so different from what I've seen before as to be too confusing. White spaces don't count. Semicolons do. Use 'var' to declare a variable. We learned the practical difference between switches, for loops, and while loops. But the big thing that we saw was that things are objects and _J_ava _S_cript _O_bjects have a certain _N_otation which is familiar. As a bonus, we had to teach ourselves about date objects. And if you subtract one date object from another date object you get an integer. But it's more useful to cast that integer back into another date object. I should also add that I added a filter for my twit bot to avoid what I consider 'touchy' hashtags. Even random words of encouragement can backfire if used in an improper context."},
{"date":"05.01.15", "title":"Yoda did not code.", "text":"Because try. And getting something done with tweepy and twitter is often best to try trying. Specifically, there can be many unforeseen errors when making an api call, especially when you run close to your api call limits. So making the call inside a 'try' can keep your bot from crashing. Also, lest one think I tend to spend too much time on silly bots that just annoy people, this bot analyses friends of friends to see who should be on a person's friend list, but isn't yet. A very practical feature and not at all silly. I misunderstood date objects but was able to fix the problem that that misunderstanding caused. Also, in reviewing JavaScript, I understand how switches can be a bit shorter in keystrokes and have a slightly better readability as opposed to a string of if/else loops, but as they still do the same thing, it's strange to me that they exist."},
{"date":"05.04.2015", "title":"Forms, Follows, Functions. &#91and JQuery&#93", "text":"Today we learned HTML forms. While they are pretty straightforward to set up, pulling info back out of them is not as intuitive. My twitter bot has a function to follow back anyone who follows it, but this breaks on 'pending' follows. Oh wait, I need to reread my post previous post. Functions in JavaScript also worked as expected, which was very nice, especially because JQuery did not. Although after learning to give everything an ID with which to reference it, it just a matter of learning more syntax and notation."},
{"date":"05.05.2015", "title":"Getting round.", "text":"Today was spent working on 2 projects that appear to be simple HTML forms, but each led to some new opportunities to learn. Although not everyone used regex to verify if input fields did in fact match what was dictated by the respective field, I spent some time trying to parse out some pre-formed regex patterns I found online. After creating one pattern and adding more and more criteria to it, I saw it slowly grow into something I couldn't easily re-decipher. The other project gave me the opportunity to look at more jQuery methods. As of this morning I thought jQ was a bit like modern jazz-- those who have been steeped in it swear it's incredible, but at first pass it's hard to see the beauty. Today I'm feeling a bit more bop. <br><br>We also got a visit from a tech recruiter. She gave a lively presentation and some further insight to what employers may be looking for in a jdev. Along with this I expanded both my twitter network and my LinkedIn network, things that are much easier to do when you feel good about what you've accomplished, even though I'm just getting started. I'm feeling rather well rounded."},
{"date":"05.06.2015", "title":"The Elevator Pitch.", "text":"My name is Marc and I'm a developer. I've created a twitterbot that tweets out a positive message in response to random trending hashtags. Without ever asking to be followed, this bot has more followers that my personal and professional accounts combined. I've also created a bot that cross references people you follow to determine who else you should follow. I've built a game in python in the style of Go and Othello that is not only fun, but smart enough to usually beat me. I was part of a team that pulled huge amounts of tweet data from a number of geographic areas, stored the data on a local backend and ran analytics on the data retrieved. I'm in the process streamlining an existing process that accepts, formats, stores, and presents blog posts. You can see it in action on my website. I like finding new ways to do things, better ways to do things, and faster ways to do things. I'm a developer not just because I enjoy this, but because there are people and businesses who need people like me to do this."},
{"date":"05.07.2015", "title":"If you cannot read this then I have failed.", "text":"On the other hand, if you are reading this then I have successfully made the improvements to this blog. I have successfully applied the jQuery commands that selectively show blog posts by either pagination or by search criteria. I've also been learning formatting techniques and dealing with 'recaptured' escape characters. I still need to write the code to make each new blog entry the penultimate entry (the last is a post from the future). But just like you reading this means I succeeded in today's objective, if there are any posts from after the day you are reading this, I've been met with even more success. ;)"},
{"date":"05.08.2015", "title":"When I say my blog I really do mean MY blog.", "text":"If you've made it this far in the blog, then you're looking at a page that is the direct product of my education in HTML, JavaScript and jQuery. The pagination is mine. I wrote it from scratch. In fact, if you know how, look at the code in the blogger.js file. No one else would claim that mess as their own. I, however, am proud of that. And perhaps I will go back and clean it up when I have the chance and maybe it could actually be something other developers would be happy to have written."},
{"date":"05.11.2015", "title":"SQL, EXIF and other misc letters", "text":"We had our formal introduction to SQL. I've dealt with databases before, and one-to-one vs one-to-many vs many-to-many before and I didn't understand it back then either. It makes a little bit more sense this time around and I fully expect my additional studying tonight will solidify my understanding.<br><br>More importantly, though, is that I've laid the groundwork for my person project. Although I need a good name, it will be a site that allows the user to learn about the effects of changing settings on a camera by quizzing them on what settings were used in a picture. The pictures will be coming from flickr and will rely on photos that have EXIF data-- this is data that includes what camera and or lens was used, the aperture, shutter speed, ISO, etc. The site will help a user understand not only what makes a good picture, but how manipulating these parameters can make their own pictures better."},
{"date":"05.12.2015", "title":"All hashed out.", "text":"I started the day stubbing out the code for my project, Photo Tutor. (I still need a better name.) Stubbing means setting up the bare bones of what should happen. Ideally, I put in the meat and guts (the majority of code), give it a nice skin, and maybe a spiffy outfit. In reality, the bones will change, some added, some deleted, and everything on top will then be changed, too. <br><br> Quick diversion: We flew an RC helicopter. 1 in 3 of us accomplished the landing objective.<br><br>Back to the projects: I set mine up as a set of user stories with corresponding developer tasks. I decided what was required for the minimum viable product (or MVP or meat and guts in the above analogy) and what would be extension goals to accomplish once the MVP is met.<br><br>I set up calls to flickr to pull data and I know I'm authorized to make calls one at a time, using their API explorer to construct the url to make the call. However, to automate additional calls, I'm required to calculate an MD5 hash of a string of a number of things. Despite having the string formatted as correctly as I can figure, the MD5 hash is not what flickr is happy with. Multiple MD5 calculators yield the same result, so I am confident the calculation is correct, but that means there must be an error in the calculation. If not for this roadblock I would say that I made decent progress. There will be less sleep tonight as this gets hashed out. "},
{"date":"05.13.2015", "title":"Untitled.", "text":"Sometimes one's creativity is so low that one cannot even title a blog post.<br><br>My overnight challenge was to find what was wrong with the string I was using for flickr authentication. That was found late last night. Implementing what I learned I came up against another obstacle this morning, which was very similar-- although I thought I was forming my API urls properly, things did not execute properly. After breaking things down and building them back up several times, I discovered that nothing was wrong, per se, but a tiny bit was missing. format=json actually does not mean the format is json, but jsonp.not the same. go figure. I need to go home, be a dad for a while and then jump back into this project before I get to sleep."},
{"date":"05.14.2015", "title":"Cue OK Go", "text":"It's a strange thing to work on a program that is based on images and you spend all day working on the text that brings the images into your purview. When you don't really get the payoff of seeing something it seems like you have not made any progress. But today was more like building a Rube Goldberg machine-- set up all these disparate pieces in a maze-like fashion which is based on your best logic but appears to be completely haphazard. One misplaced piece and nothing happens. But at the end of the day, when all the properly calculated and independently tested pieces are in the piece, you get that payoff. I've noticed that sometimes this has been my pattern and in the past, others have doubted if that payoff was coming, but in the final hours they came with enough momentum to bring it past the original target. Right now I doubt if that will happen for our Friday deadline, but I'm still confident that it will be polished by the 27th, when we and our projects will be on display to the public.<br><br>...and my twitbot now has more than 300 followers. The only followers I requested were the bots of my classmates. The rest of the followers are people who apparently like the unicorn. And, per the replies, it has also somehow offended 2 people and confused about 2 dozen. After the photo project I'll have to figure out how to automate such stats, including re-tweets."},
{"date":"05.15.2015", "title":"Curiouser and curiouser... ", "text":"We got to the end of week five. We each completed something of an MVP for our projects. I'm tired, but I'm happy. Sure, it's nice to be curious when there's either plenty of time or no real deadline, but when there's a hard ended timeline, curiosities kind of feel like issues rather than opportunities. I'll have to resist the impulse to react like that. Instead, I'll aim to enjoy all of the new stuff, finding ways that they fit into what I'm doing or what I've already done. In researching for my photo project I found some formatting techniques that I implemented into my blog. I could have easily spent much more time going down that rabbit hole, but getting just a taste was enough considering the real project at hand. Once again I am plagues with asynchronicity, but instead of json calls, for which I think I have the timing issues down, it is the curious combination of url calls with animated CSS.Or maybe it's just the animated CSS and/or jQuery. I'll have to squash the issue over the weekend.<br><br>There's so many directions I can go with this project. As I continue to flesh it out I'm sure there will be many more curiosities to keep my busy. Or keep me crazy."},
{"date":"05.18.2015", "title":"Nights were made for JavaScript", "text":"(Or any code that needs further attention.)<br>We finished the JavaScript unit as far as direct instruction goes so we took an assessment this morning. I'm happy with my A, but I imagine I'd be able to get a perfect score if we were to take the test in a week, after I've spent even more time on my personal project. We presented those projects as they were officially done this morning with the end of the unit, too. I'm not as happy with my results so far, mostly because I see the potential of how else I can improve code, execution, and features. As the Meet-up presentation is what I consider the final deadline, I will have time to get things closer to my own satisfaction.<br><br>We also started with C#. I stumbled a bit with the command line compiler with the resource file, but I had no issues with the rest of the labs, creating simple projects of various types: an Asp.net web app, a WPF app, a Winforms app, and console app. This was all done in Microsoft Visual Studio. It's nice to be working in a formal IDE as opposed to just a nice text editor. Auto completion is much smarter and less intrusive compared to what was happening in Notebook++."},
{"date":"05.19.2015", "title":"C#, basic IT topics, and more C#", "text":"We went over fundamental C# syntax and commands with corresponding labs. Nothing glamorous about that stuff, but necessary, for sure. We took a break from that for some lectures from our resident IT guy, covering servers, nodes, networks, MAC and IP addresses, public keys, etc from a pretty high overview perspective, with the understanding that developers would be well served to understand enough of that to be able not only to speak to the IT guys, but to know if and how to addresses how the code interacts with these things. Not too unrelated to that, our C# instructor built a program that monitored a folder for changes and copied changed files into a target directory if the file wasn't already there. Very simple, but handy as we were manually copying files as they were added to the source folder. We followed along as he coded, copying the copy code as he went. We have not used this technique before here at devCodeCamp, but I've used it before. Just as it's helpful for a student to type out codes and patterns rather than copying/pasting, more things go into memory when the physical actions are performed. We went at a speed such that we might not understand every command, but also fast enough for patterns to be easily seen. We should do this more often."},
{"date":"05.20.2015", "title":"Enum num num num...", "text":"C#-- Today we did in C# what we did in the first week of Python, which was declaring variables, writing loops, switches, and conditionals. Again, many things that are very similar, especially to JavaScript, and some things that will take some getting use to. A new concept was the enum, which is like a list, but with a different use. Like using a 16bit int vs a 32bit int, the advantages will be more apparent as I use the concept more often and/or with larger data sets. The fun/frustrating part of today was the lab dealing with batch files. The power of scripting was underscored by the fact that the most time was spend on this lab on average by myself and my cohorts, but the solution was essentially two keystrokes. Everyone who finally got it reacted the same way that a person reacts when someone has to explain a joke-- that mix of relief and exasperation that translates to 'Really, that's it?!'<br><br>IT-- More lectures on IP addresses, networking, and things we shouldn't do (this time in the form of a website NOT to visit). I won't repeat the address or why it should be avoided. ;)"},
{"date":"05.21.2015", "title":"...and we learned something, too.", "text":"We started the day finishing up the enum lab from yesterday. There was a little bug in what we were asked to do. Once the bug was squashed things were smooth sailing. We then went onto a code challenge: the high low game, but this time the computer is supposed to guess your number. Although we all eventually used a binary operation to get our number, some use of random numbers allowed some people to get the answer faster for the numbers we tested. That won't be the case with every number and with every trial. OOOOOOOH! Brainstorm! Although a binary operation will require at most 13 guesses to get a number between 1 and 5000 because 2^13 is the first power of 2 over 5000, if the first guess is 2^12 instead of 2500, the max is still 13 total for numbers below 2^12 but much smaller for numbers between 2^12 and 5000. I could make my code faster on average than every else's who didn't take this into account (that is if a multi-threaded version also averaged the times of all of its threads).<br><br>Also more IT and C# methods. Important, but not as fun as the challenge. ;)"},
{"date":"05.22.2015", "title":"This is madness! Madness?! This is devCode!", "text":"Today marks hour number 300 that we've spent as devCodeCampers. We are now halfway through the program. My personal highlight for today was when we group coded a challenge. While it was small, we were each able to contribute and follow along. We were able to speak in both pseudocode and syntactically correct C#. Compare that to how we did in the middle of the first week (see 4.15.2015) and it's clear that we have come a long way not only in understanding code, but more importantly how to communicate both in and about code.<br><br>Progress was also made on labs in the morning and we presented our projects to each other again as practice for out Meet-up. I still have a lot that I want to do before that presentation. I completed an MVP (minimum viable product) last week when that amount was due. It may have been 'v' but it was mostly 'm.' These past few days I have cleaned everything to run smoothly and predictably, but have not added any stretch goals -- additional features that do not change the essence of the program but do make it better. I have laid the groundwork for such changes and have a 3 day weekend to get even more done. If read this before 5.27.2015 come in to see how it will go. If you're reading after that date, read on to see how it went."},
{"date":"...sometime in the future?", "title":"Dang, that was easy!", "text":"Not to brag, but I think I have mastered everything. Not just in code, but in life."}
]}